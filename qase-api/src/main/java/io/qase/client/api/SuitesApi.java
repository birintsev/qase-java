/*
 * Qase.io API
 * Qase API Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.qase.client.api;

import io.qase.api.exceptions.QaseException;
import io.qase.client.ApiCallback;
import io.qase.client.ApiClient;
import io.qase.client.ApiResponse;
import io.qase.client.model.*;

public class SuitesApi extends AbstractEntityApi<SuiteCreate, SuiteResponse, SuiteListResponse, Object, Object> {

    public SuitesApi() {
        super();
    }

    public SuitesApi(ApiClient apiClient) {
        super(apiClient);
    }

    /**
     * Build call for createSuite
     *
     * @param code        Code of project, where to search entities. (required)
     * @param suiteCreate (required)
     * @param _callback   Callback for upload/download progress
     * @return Call to execute
     * @throws QaseException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A list of all projects. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createSuiteCall(String code, SuiteCreate suiteCreate, final ApiCallback _callback)
    throws QaseException {
        return createEntityCall(code, suiteCreate, _callback);
    }

    /**
     * Create a new test suite.
     * This method is used to create a new test suite through API.
     *
     * @param code        Code of project, where to search entities. (required)
     * @param suiteCreate (required)
     * @return IdResponse
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A list of all projects. </td><td>  -  </td></tr>
     * </table>
     */
    public IdResponse createSuite(String code, SuiteCreate suiteCreate) throws QaseException {
        return createEntity(code, suiteCreate);
    }

    /**
     * Create a new test suite.
     * This method is used to create a new test suite through API.
     *
     * @param code        Code of project, where to search entities. (required)
     * @param suiteCreate (required)
     * @return ApiResponse&lt;IdResponse&gt;
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A list of all projects. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IdResponse> createSuiteWithHttpInfo(String code, SuiteCreate suiteCreate) throws QaseException {
        return createEntityWithHttpInfo(code, suiteCreate);
    }

    /**
     * Create a new test suite. (asynchronously)
     * This method is used to create a new test suite through API.
     *
     * @param code        Code of project, where to search entities. (required)
     * @param suiteCreate (required)
     * @param _callback   The callback to be executed when the API call finishes
     * @return The request call
     * @throws QaseException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A list of all projects. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createSuiteAsync(String code, SuiteCreate suiteCreate, final ApiCallback<IdResponse> _callback)
    throws QaseException {
        return createEntityAsync(code, suiteCreate, _callback);
    }

    /**
     * Build call for deleteSuite
     *
     * @param code        Code of project, where to search entities. (required)
     * @param id          Identifier. (required)
     * @param suiteDelete (optional)
     * @param _callback   Callback for upload/download progress
     * @return Call to execute
     * @throws QaseException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A result of operation. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteSuiteCall(String code, Integer id, SuiteDelete suiteDelete, final ApiCallback _callback)
    throws QaseException {
        return deleteEntityCall(code, id, suiteDelete, _callback);
    }

    /**
     * Delete test suite.
     * This method completely deletes a test suite with test cases from repository.
     *
     * @param code        Code of project, where to search entities. (required)
     * @param id          Identifier. (required)
     * @param suiteDelete (optional)
     * @return IdResponse
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A result of operation. </td><td>  -  </td></tr>
     * </table>
     */
    public IdResponse deleteSuite(String code, Integer id, SuiteDelete suiteDelete) throws QaseException {
        return deleteEntity(code, id, suiteDelete);
    }

    /**
     * Delete test suite.
     * This method completely deletes a test suite with test cases from repository.
     *
     * @param code        Code of project, where to search entities. (required)
     * @param id          Identifier. (required)
     * @param suiteDelete (optional)
     * @return ApiResponse&lt;IdResponse&gt;
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A result of operation. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IdResponse> deleteSuiteWithHttpInfo(String code, Integer id, SuiteDelete suiteDelete)
    throws QaseException {
        return deleteEntityWithHttpInfo(code, id, suiteDelete);
    }

    /**
     * Delete test suite. (asynchronously)
     * This method completely deletes a test suite with test cases from repository.
     *
     * @param code        Code of project, where to search entities. (required)
     * @param id          Identifier. (required)
     * @param suiteDelete (optional)
     * @param _callback   The callback to be executed when the API call finishes
     * @return The request call
     * @throws QaseException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A result of operation. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteSuiteAsync(
        String code, Integer id, SuiteDelete suiteDelete, final ApiCallback<IdResponse> _callback
    ) throws QaseException {
        return deleteEntityAsync(code, id, suiteDelete, _callback);
    }

    /**
     * Build call for getSuite
     *
     * @param code      Code of project, where to search entities. (required)
     * @param id        Identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws QaseException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A Test Case. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getSuiteCall(String code, Integer id, final ApiCallback _callback) throws QaseException {
        return getEntityCall(code, id, _callback);
    }

    /**
     * Get a specific test suite.
     * This method allows to retrieve a specific test suite.
     *
     * @param code Code of project, where to search entities. (required)
     * @param id   Identifier. (required)
     * @return SuiteResponse
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A Test Case. </td><td>  -  </td></tr>
     * </table>
     */
    public SuiteResponse getSuite(String code, Integer id) throws QaseException {
        return getEntity(code, id);
    }

    /**
     * Get a specific test suite.
     * This method allows to retrieve a specific test suite.
     *
     * @param code Code of project, where to search entities. (required)
     * @param id   Identifier. (required)
     * @return ApiResponse&lt;SuiteResponse&gt;
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A Test Case. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<SuiteResponse> getSuiteWithHttpInfo(String code, Integer id) throws QaseException {
        return getEntityWithHttpInfo(code, id);
    }

    /**
     * Get a specific test suite. (asynchronously)
     * This method allows to retrieve a specific test suite.
     *
     * @param code      Code of project, where to search entities. (required)
     * @param id        Identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QaseException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A Test Case. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getSuiteAsync(String code, Integer id, final ApiCallback<SuiteResponse> _callback)
    throws QaseException {
        return getEntityAsync(code, id, _callback);
    }

    /**
     * Build call for getSuites
     *
     * @param code      Code of project, where to search entities. (required)
     * @param filters   (optional)
     * @param limit     A number of entities in result set. (optional, default to 10)
     * @param offset    How many entities should be skipped. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws QaseException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A list of all suites of project. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getSuitesCall(
        String code, Filters7 filters, Integer limit, Integer offset, final ApiCallback _callback
    ) throws QaseException {
        return getEntitiesCall(code, filters, limit, offset, _callback);
    }

    /**
     * Get all test suites.
     * This method allows to retrieve all test suites stored in selected project..
     *
     * @param code    Code of project, where to search entities. (required)
     * @param filters (optional)
     * @param limit   A number of entities in result set. (optional, default to 10)
     * @param offset  How many entities should be skipped. (optional, default to 0)
     * @return SuiteListResponse
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A list of all suites of project. </td><td>  -  </td></tr>
     * </table>
     */
    public SuiteListResponse getSuites(String code, Filters7 filters, Integer limit, Integer offset)
    throws QaseException {
        return getEntities(code, filters, limit, offset);
    }

    /**
     * Get all test suites.
     * This method allows to retrieve all test suites stored in selected project..
     *
     * @param code    Code of project, where to search entities. (required)
     * @param filters (optional)
     * @param limit   A number of entities in result set. (optional, default to 10)
     * @param offset  How many entities should be skipped. (optional, default to 0)
     * @return ApiResponse&lt;SuiteListResponse&gt;
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A list of all suites of project. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<SuiteListResponse> getSuitesWithHttpInfo(
        String code, Filters7 filters, Integer limit, Integer offset
    ) throws QaseException {
        return getEntitiesWithHttpInfo(code, filters, limit, offset);
    }

    /**
     * Get all test suites. (asynchronously)
     * This method allows to retrieve all test suites stored in selected project..
     *
     * @param code      Code of project, where to search entities. (required)
     * @param filters   (optional)
     * @param limit     A number of entities in result set. (optional, default to 10)
     * @param offset    How many entities should be skipped. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QaseException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A list of all suites of project. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getSuitesAsync(
        String code, Filters7 filters, Integer limit, Integer offset, final ApiCallback<SuiteListResponse> _callback
    ) throws QaseException {
        return getEntitiesAsync(code, filters, limit, offset, _callback);
    }

    /**
     * Build call for updateSuite
     *
     * @param code        Code of project, where to search entities. (required)
     * @param id          Identifier. (required)
     * @param suiteCreate (required)
     * @param _callback   Callback for upload/download progress
     * @return Call to execute
     * @throws QaseException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A result of operation. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateSuiteCall(
        String code, Integer id, SuiteCreate suiteCreate, final ApiCallback _callback
    ) throws QaseException {
        return updateEntityCall(code, id, suiteCreate, _callback);
    }

    /**
     * Update test suite.
     * This method is used to update a test suite through API.
     *
     * @param code        Code of project, where to search entities. (required)
     * @param id          Identifier. (required)
     * @param suiteCreate (required)
     * @return IdResponse
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A result of operation. </td><td>  -  </td></tr>
     * </table>
     */
    public IdResponse updateSuite(String code, Integer id, SuiteCreate suiteCreate) throws QaseException {
        ApiResponse<IdResponse> localVarResp = updateSuiteWithHttpInfo(code, id, suiteCreate);
        return localVarResp.getData();
    }

    /**
     * Update test suite.
     * This method is used to update a test suite through API.
     *
     * @param code        Code of project, where to search entities. (required)
     * @param id          Identifier. (required)
     * @param suiteCreate (required)
     * @return ApiResponse&lt;IdResponse&gt;
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A result of operation. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IdResponse> updateSuiteWithHttpInfo(String code, Integer id, SuiteCreate suiteCreate)
    throws QaseException {
        return updateEntityWithHttpInfo(code, id, suiteCreate);
    }

    /**
     * Update test suite. (asynchronously)
     * This method is used to update a test suite through API.
     *
     * @param code        Code of project, where to search entities. (required)
     * @param id          Identifier. (required)
     * @param suiteCreate (required)
     * @param _callback   The callback to be executed when the API call finishes
     * @return The request call
     * @throws QaseException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A result of operation. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateSuiteAsync(
        String code, Integer id, SuiteCreate suiteCreate, final ApiCallback<IdResponse> _callback
    ) throws QaseException {
        return updateEntityAsync(code, id, suiteCreate, _callback);
    }

    @Override
    protected String getEntityPath() {
        return "/suite";
    }
}
