/*
 * Qase.io API
 * Qase API Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.qase.client.api;

import io.qase.api.exceptions.QaseException;
import io.qase.client.ApiCallback;
import io.qase.client.ApiClient;
import io.qase.client.ApiResponse;
import io.qase.client.model.*;

public class MilestonesApi
extends AbstractEntityApi<MilestoneCreate, MilestoneResponse, MilestoneListResponse, MilestoneUpdate, Object> {

    public MilestonesApi() {
        super();
    }

    public MilestonesApi(ApiClient apiClient) {
        super(apiClient);
    }

    /**
     * Build call for createMilestone
     *
     * @param code            Code of project, where to search entities. (required)
     * @param milestoneCreate (required)
     * @param _callback       Callback for upload/download progress
     * @return Call to execute
     * @throws QaseException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A result. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createMilestoneCall(String code, MilestoneCreate milestoneCreate, final ApiCallback _callback)
    throws QaseException {
        return createEntityCall(code, milestoneCreate, _callback);
    }

    /**
     * Create a new milestone.
     * This method allows to create a milestone in selected project.
     *
     * @param code            Code of project, where to search entities. (required)
     * @param milestoneCreate (required)
     * @return IdResponse
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A result. </td><td>  -  </td></tr>
     * </table>
     */
    public IdResponse createMilestone(String code, MilestoneCreate milestoneCreate) throws QaseException {
        return createEntity(code, milestoneCreate);
    }

    /**
     * Create a new milestone.
     * This method allows to create a milestone in selected project.
     *
     * @param code            Code of project, where to search entities. (required)
     * @param milestoneCreate (required)
     * @return ApiResponse&lt;IdResponse&gt;
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A result. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IdResponse> createMilestoneWithHttpInfo(String code, MilestoneCreate milestoneCreate)
    throws QaseException {
        return createEntityWithHttpInfo(code, milestoneCreate);
    }

    /**
     * Create a new milestone. (asynchronously)
     * This method allows to create a milestone in selected project.
     *
     * @param code            Code of project, where to search entities. (required)
     * @param milestoneCreate (required)
     * @param _callback       The callback to be executed when the API call finishes
     * @return The request call
     * @throws QaseException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A result. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createMilestoneAsync(
        String code, MilestoneCreate milestoneCreate, final ApiCallback<IdResponse> _callback
    ) throws QaseException {
        return createEntityAsync(code, milestoneCreate, _callback);
    }

    /**
     * Build call for deleteMilestone
     *
     * @param code      Code of project, where to search entities. (required)
     * @param id        Identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws QaseException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A Result. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteMilestoneCall(String code, Integer id, final ApiCallback _callback) throws QaseException {
        return deleteEntityCall(code, id, _callback);
    }

    /**
     * Delete milestone.
     * This method completely deletes a milestone from repository.
     *
     * @param code Code of project, where to search entities. (required)
     * @param id   Identifier. (required)
     * @return IdResponse
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A Result. </td><td>  -  </td></tr>
     * </table>
     */
    public IdResponse deleteMilestone(String code, Integer id) throws QaseException {
        return deleteEntity(code, id);
    }

    /**
     * Delete milestone.
     * This method completely deletes a milestone from repository.
     *
     * @param code Code of project, where to search entities. (required)
     * @param id   Identifier. (required)
     * @return ApiResponse&lt;IdResponse&gt;
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A Result. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IdResponse> deleteMilestoneWithHttpInfo(String code, Integer id) throws QaseException {
        return deleteEntityWithHttpInfo(code, id);
    }

    /**
     * Delete milestone. (asynchronously)
     * This method completely deletes a milestone from repository.
     *
     * @param code      Code of project, where to search entities. (required)
     * @param id        Identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QaseException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A Result. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteMilestoneAsync(String code, Integer id, final ApiCallback<IdResponse> _callback)
    throws QaseException {
        return deleteEntityAsync(code, id, _callback);
    }

    /**
     * Build call for getMilestone
     *
     * @param code      Code of project, where to search entities. (required)
     * @param id        Identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws QaseException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A Milestone. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getMilestoneCall(String code, Integer id, final ApiCallback _callback) throws QaseException {
        return getEntityCall(code, id, _callback);
    }

    /**
     * Get a specific milestone.
     * This method allows to retrieve a specific milestone.
     *
     * @param code Code of project, where to search entities. (required)
     * @param id   Identifier. (required)
     * @return MilestoneResponse
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A Milestone. </td><td>  -  </td></tr>
     * </table>
     */
    public MilestoneResponse getMilestone(String code, Integer id) throws QaseException {
        return getEntity(code, id);
    }

    /**
     * Get a specific milestone.
     * This method allows to retrieve a specific milestone.
     *
     * @param code Code of project, where to search entities. (required)
     * @param id   Identifier. (required)
     * @return ApiResponse&lt;MilestoneResponse&gt;
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A Milestone. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<MilestoneResponse> getMilestoneWithHttpInfo(String code, Integer id) throws QaseException {
        return getEntityWithHttpInfo(code, id);
    }

    /**
     * Get a specific milestone. (asynchronously)
     * This method allows to retrieve a specific milestone.
     *
     * @param code      Code of project, where to search entities. (required)
     * @param id        Identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QaseException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A Milestone. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getMilestoneAsync(String code, Integer id, final ApiCallback<MilestoneResponse> _callback)
    throws QaseException {
        return getEntityAsync(code, id, _callback);
    }

    /**
     * Build call for getMilestones
     *
     * @param code      Code of project, where to search entities. (required)
     * @param filters   (optional)
     * @param limit     A number of entities in result set. (optional, default to 10)
     * @param offset    How many entities should be skipped. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws QaseException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A list of all milestones. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getMilestonesCall(
        String code, Filters3 filters, Integer limit, Integer offset, final ApiCallback _callback
    ) throws QaseException {
        return getEntitiesCall(code, filters, limit, offset, _callback);
    }

    /**
     * Get all milestones.
     * This method allows to retrieve all milestones stored in selected project.
     *
     * @param code    Code of project, where to search entities. (required)
     * @param filters (optional)
     * @param limit   A number of entities in result set. (optional, default to 10)
     * @param offset  How many entities should be skipped. (optional, default to 0)
     * @return MilestoneListResponse
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A list of all milestones. </td><td>  -  </td></tr>
     * </table>
     */
    public MilestoneListResponse getMilestones(String code, Filters3 filters, Integer limit, Integer offset)
    throws QaseException {
        return getEntities(code, filters, limit, offset);
    }

    /**
     * Get all milestones.
     * This method allows to retrieve all milestones stored in selected project.
     *
     * @param code    Code of project, where to search entities. (required)
     * @param filters (optional)
     * @param limit   A number of entities in result set. (optional, default to 10)
     * @param offset  How many entities should be skipped. (optional, default to 0)
     * @return ApiResponse&lt;MilestoneListResponse&gt;
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A list of all milestones. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<MilestoneListResponse> getMilestonesWithHttpInfo(
        String code, Filters3 filters, Integer limit, Integer offset
    ) throws QaseException {
        return getEntitiesWithHttpInfo(code, filters, limit, offset);
    }

    /**
     * Get all milestones. (asynchronously)
     * This method allows to retrieve all milestones stored in selected project.
     *
     * @param code      Code of project, where to search entities. (required)
     * @param filters   (optional)
     * @param limit     A number of entities in result set. (optional, default to 10)
     * @param offset    How many entities should be skipped. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QaseException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A list of all milestones. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getMilestonesAsync(
        String code, Filters3 filters, Integer limit, Integer offset, final ApiCallback<MilestoneListResponse> _callback
    ) throws QaseException {
        return getEntitiesAsync(code, filters, limit, offset, _callback);
    }

    /**
     * Build call for updateMilestone
     *
     * @param code            Code of project, where to search entities. (required)
     * @param id              Identifier. (required)
     * @param milestoneUpdate (required)
     * @param _callback       Callback for upload/download progress
     * @return Call to execute
     * @throws QaseException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A result. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateMilestoneCall(
        String code, Integer id, MilestoneUpdate milestoneUpdate, final ApiCallback _callback
    ) throws QaseException {
        return updateEntityCall(code, id, milestoneUpdate, _callback);
    }

    /**
     * Update milestone.
     * This method updates a milestone.
     *
     * @param code            Code of project, where to search entities. (required)
     * @param id              Identifier. (required)
     * @param milestoneUpdate (required)
     * @return IdResponse
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A result. </td><td>  -  </td></tr>
     * </table>
     */
    public IdResponse updateMilestone(String code, Integer id, MilestoneUpdate milestoneUpdate) throws QaseException {
        return updateEntity(code, id, milestoneUpdate);
    }

    /**
     * Update milestone.
     * This method updates a milestone.
     *
     * @param code            Code of project, where to search entities. (required)
     * @param id              Identifier. (required)
     * @param milestoneUpdate (required)
     * @return ApiResponse&lt;IdResponse&gt;
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A result. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IdResponse> updateMilestoneWithHttpInfo(String code, Integer id, MilestoneUpdate milestoneUpdate)
    throws QaseException {
        return updateEntityWithHttpInfo(code, id, milestoneUpdate);
    }

    /**
     * Update milestone. (asynchronously)
     * This method updates a milestone.
     *
     * @param code            Code of project, where to search entities. (required)
     * @param id              Identifier. (required)
     * @param milestoneUpdate (required)
     * @param _callback       The callback to be executed when the API call finishes
     * @return The request call
     * @throws QaseException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A result. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateMilestoneAsync(
        String code, Integer id, MilestoneUpdate milestoneUpdate, final ApiCallback<IdResponse> _callback
    ) throws QaseException {
        return updateEntityAsync(code, id, milestoneUpdate, _callback);
    }

    @Override
    protected String getEntityPath() {
        return "/milestone";
    }
}
