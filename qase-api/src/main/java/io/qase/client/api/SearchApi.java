/*
 * Qase.io API
 * Qase API Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.qase.client.api;

import com.google.gson.reflect.TypeToken;
import io.qase.api.exceptions.QaseException;
import io.qase.client.ApiCallback;
import io.qase.client.ApiClient;
import io.qase.client.ApiResponse;
import io.qase.client.model.SearchResponse;
import io.qase.enums.HttpMethod;

import java.lang.reflect.Type;
import java.util.HashMap;

public class SearchApi extends AbstractEntityApi<Object, Object, Object, Object, Object> {

    public SearchApi() {
        super();
    }

    public SearchApi(ApiClient apiClient) {
        super(apiClient);
    }

    /**
     * Build call for search
     *
     * @param query     Expression in Qase Query Language. (required)
     * @param limit     A number of entities in result set. (optional, default to 10)
     * @param offset    How many entities should be skipped. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws QaseException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A list of found entities. </td><td>  -  </td></tr>
     * </table>
     * Find more info about QQL here.
     * @see <a href="https://help.qase.io/hc/en-us/articles/4404615073041">Search entities by Qase Query Language (QQL). Documentation</a>
     */
    public okhttp3.Call searchCall(String query, Integer limit, Integer offset, final ApiCallback _callback)
    throws QaseException {
        return createCallInternal(
            HttpMethod.GET,
            joinEntitySubpath(),
            null,
            filterNullsAndConvertToPairs(new HashMap<String, Object>() {{
                put(LIMIT_QUERY_PARAMETER_NAME, limit);
                put(OFFSET_QUERY_PARAMETER_NAME, offset);
                put(QUERY_QUERY_PARAMETER_NAME, query);
            }}),
            _callback
        );
    }

    /**
     * Search entities by Qase Query Language (QQL).
     * This method allows to retrieve data sets for various entities using expressions with conditions.
     *
     * @param query  Expression in Qase Query Language. (required)
     * @param limit  A number of entities in result set. (optional, default to 10)
     * @param offset How many entities should be skipped. (optional, default to 0)
     * @return SearchResponse
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A list of found entities. </td><td>  -  </td></tr>
     * </table>
     * Find more info about QQL here.
     * @see <a href="https://help.qase.io/hc/en-us/articles/4404615073041">Search entities by Qase Query Language (QQL). Documentation</a>
     */
    public SearchResponse search(String query, Integer limit, Integer offset) throws QaseException {
        ApiResponse<SearchResponse> localVarResp = searchWithHttpInfo(query, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Search entities by Qase Query Language (QQL).
     * This method allows to retrieve data sets for various entities using expressions with conditions.
     *
     * @param query  Expression in Qase Query Language. (required)
     * @param limit  A number of entities in result set. (optional, default to 10)
     * @param offset How many entities should be skipped. (optional, default to 0)
     * @return ApiResponse&lt;SearchResponse&gt;
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A list of found entities. </td><td>  -  </td></tr>
     * </table>
     * Find more info about QQL here.
     * @see <a href="https://help.qase.io/hc/en-us/articles/4404615073041">Search entities by Qase Query Language (QQL). Documentation</a>
     */
    public ApiResponse<SearchResponse> searchWithHttpInfo(String query, Integer limit, Integer offset)
    throws QaseException {
        okhttp3.Call localVarCall = searchValidateBeforeCall(query, limit, offset, null);
        Type localVarReturnType = new TypeToken<SearchResponse>() { }.getType();
        return getApiClient().execute(localVarCall, localVarReturnType);
    }

    /**
     * Search entities by Qase Query Language (QQL). (asynchronously)
     * This method allows to retrieve data sets for various entities using expressions with conditions.
     *
     * @param query     Expression in Qase Query Language. (required)
     * @param limit     A number of entities in result set. (optional, default to 10)
     * @param offset    How many entities should be skipped. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QaseException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A list of found entities. </td><td>  -  </td></tr>
     * </table>
     * Find more info about QQL here.
     * @see <a href="https://help.qase.io/hc/en-us/articles/4404615073041">Search entities by Qase Query Language (QQL). Documentation</a>
     */
    public okhttp3.Call searchAsync(
        String query, Integer limit, Integer offset, final ApiCallback<SearchResponse> _callback
    ) throws QaseException {
        okhttp3.Call localVarCall = searchValidateBeforeCall(query, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<SearchResponse>() { }.getType();
        getApiClient().executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    @Override
    protected String getEntityRootPathSegment() {
        return "search";
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchValidateBeforeCall(
        String query, Integer limit, Integer offset, final ApiCallback _callback
    ) throws QaseException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new QaseException("Missing the required parameter 'query' when calling search(Async)");
        }

        return searchCall(query, limit, offset, _callback);
    }
}
