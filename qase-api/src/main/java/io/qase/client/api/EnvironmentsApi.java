/*
 * Qase.io API
 * Qase API Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.qase.client.api;

import io.qase.api.exceptions.QaseException;
import io.qase.client.ApiCallback;
import io.qase.client.ApiClient;
import io.qase.client.ApiResponse;
import io.qase.client.model.*;

public class EnvironmentsApi
extends AbstractEntityApi<EnvironmentCreate, EnvironmentResponse, EnvironmentListResponse, EnvironmentUpdate, Object> {

    public EnvironmentsApi() {
        super();
    }

    public EnvironmentsApi(ApiClient apiClient) {
        super(apiClient);
    }

    /**
     * Build call for createEnvironment
     *
     * @param code              Code of project, where to search entities. (required)
     * @param environmentCreate (required)
     * @param _callback         Callback for upload/download progress
     * @return Call to execute
     * @throws QaseException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A result. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createEnvironmentCall(
        String code, EnvironmentCreate environmentCreate, final ApiCallback _callback
    ) throws QaseException {
        return createEntityCall(code, environmentCreate, _callback);
    }

    /**
     * Create a new environment.
     * This method allows to create an environment in selected project.
     *
     * @param code              Code of project, where to search entities. (required)
     * @param environmentCreate (required)
     * @return IdResponse
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A result. </td><td>  -  </td></tr>
     * </table>
     */
    public IdResponse createEnvironment(String code, EnvironmentCreate environmentCreate) throws QaseException {
        return createEntity(code, environmentCreate);
    }

    /**
     * Create a new environment.
     * This method allows to create an environment in selected project.
     *
     * @param code              Code of project, where to search entities. (required)
     * @param environmentCreate (required)
     * @return ApiResponse&lt;IdResponse&gt;
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A result. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IdResponse> createEnvironmentWithHttpInfo(String code, EnvironmentCreate environmentCreate)
    throws QaseException {
        return createEntityWithHttpInfo(code, environmentCreate);
    }

    /**
     * Create a new environment. (asynchronously)
     * This method allows to create an environment in selected project.
     *
     * @param code              Code of project, where to search entities. (required)
     * @param environmentCreate (required)
     * @param _callback         The callback to be executed when the API call finishes
     * @return The request call
     * @throws QaseException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A result. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createEnvironmentAsync(
        String code, EnvironmentCreate environmentCreate, final ApiCallback<IdResponse> _callback
    ) throws QaseException {
        return createEntityAsync(code, environmentCreate, _callback);
    }

    /**
     * Build call for deleteEnvironment
     *
     * @param code      Code of project, where to search entities. (required)
     * @param id        Identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws QaseException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A Result. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteEnvironmentCall(String code, Integer id, final ApiCallback _callback)
    throws QaseException {
        return deleteEntityCall(code, id, _callback);
    }

    /**
     * Delete environment.
     * This method completely deletes an environment from repository.
     *
     * @param code Code of project, where to search entities. (required)
     * @param id   Identifier. (required)
     * @return IdResponse
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A Result. </td><td>  -  </td></tr>
     * </table>
     */
    public IdResponse deleteEnvironment(String code, Integer id) throws QaseException {
        return deleteEntity(code, id);
    }

    /**
     * Delete environment.
     * This method completely deletes an environment from repository.
     *
     * @param code Code of project, where to search entities. (required)
     * @param id   Identifier. (required)
     * @return ApiResponse&lt;IdResponse&gt;
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A Result. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IdResponse> deleteEnvironmentWithHttpInfo(String code, Integer id) throws QaseException {
        return deleteEntityWithHttpInfo(code, id);
    }

    /**
     * Delete environment. (asynchronously)
     * This method completely deletes an environment from repository.
     *
     * @param code      Code of project, where to search entities. (required)
     * @param id        Identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QaseException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A Result. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteEnvironmentAsync(String code, Integer id, final ApiCallback<IdResponse> _callback)
    throws QaseException {
        return deleteEntityAsync(code, id, _callback);
    }

    /**
     * Build call for getEnvironment
     *
     * @param code      Code of project, where to search entities. (required)
     * @param id        Identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws QaseException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> An environment. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getEnvironmentCall(String code, Integer id, final ApiCallback _callback) throws QaseException {
        return getEntityCall(code, id, _callback);
    }

    /**
     * Get a specific environment.
     * This method allows to retrieve a specific environment.
     *
     * @param code Code of project, where to search entities. (required)
     * @param id   Identifier. (required)
     * @return EnvironmentResponse
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> An environment. </td><td>  -  </td></tr>
     * </table>
     */
    public EnvironmentResponse getEnvironment(String code, Integer id) throws QaseException {
        return getEntity(code, id);
    }

    /**
     * Get a specific environment.
     * This method allows to retrieve a specific environment.
     *
     * @param code Code of project, where to search entities. (required)
     * @param id   Identifier. (required)
     * @return ApiResponse&lt;EnvironmentResponse&gt;
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> An environment. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<EnvironmentResponse> getEnvironmentWithHttpInfo(String code, Integer id) throws QaseException {
        return getEntityWithHttpInfo(code, id);
    }

    /**
     * Get a specific environment. (asynchronously)
     * This method allows to retrieve a specific environment.
     *
     * @param code      Code of project, where to search entities. (required)
     * @param id        Identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QaseException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> An environment. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getEnvironmentAsync(String code, Integer id, final ApiCallback<EnvironmentResponse> _callback) throws QaseException {
        return getEntityAsync(code, id, _callback);
    }

    /**
     * Build call for getEnvironments
     *
     * @param code      Code of project, where to search entities. (required)
     * @param limit     A number of entities in result set. (optional, default to 10)
     * @param offset    How many entities should be skipped. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws QaseException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A list of all environments. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getEnvironmentsCall(
        String code, Integer limit, Integer offset, final ApiCallback _callback
    ) throws QaseException {
        return getEntitiesCall(code, limit, offset, _callback);
    }

    /**
     * Get all environments.
     * This method allows to retrieve all environments stored in selected project.
     *
     * @param code   Code of project, where to search entities. (required)
     * @param limit  A number of entities in result set. (optional, default to 10)
     * @param offset How many entities should be skipped. (optional, default to 0)
     * @return EnvironmentListResponse
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A list of all environments. </td><td>  -  </td></tr>
     * </table>
     */
    public EnvironmentListResponse getEnvironments(String code, Integer limit, Integer offset) throws QaseException {
        ApiResponse<EnvironmentListResponse> localVarResp = getEnvironmentsWithHttpInfo(code, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get all environments.
     * This method allows to retrieve all environments stored in selected project.
     *
     * @param code   Code of project, where to search entities. (required)
     * @param limit  A number of entities in result set. (optional, default to 10)
     * @param offset How many entities should be skipped. (optional, default to 0)
     * @return ApiResponse&lt;EnvironmentListResponse&gt;
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A list of all environments. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<EnvironmentListResponse> getEnvironmentsWithHttpInfo(String code, Integer limit, Integer offset)
    throws QaseException {
        return getEntitiesWithHttpInfo(code, limit, offset);
    }

    /**
     * Get all environments. (asynchronously)
     * This method allows to retrieve all environments stored in selected project.
     *
     * @param code      Code of project, where to search entities. (required)
     * @param limit     A number of entities in result set. (optional, default to 10)
     * @param offset    How many entities should be skipped. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QaseException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A list of all environments. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getEnvironmentsAsync(
        String code, Integer limit, Integer offset, final ApiCallback<EnvironmentListResponse> _callback
    ) throws QaseException {
        return getEntitiesAsync(code, limit, offset, _callback);
    }

    /**
     * Build call for updateEnvironment
     *
     * @param code              Code of project, where to search entities. (required)
     * @param id                Identifier. (required)
     * @param environmentUpdate (required)
     * @param _callback         Callback for upload/download progress
     * @return Call to execute
     * @throws QaseException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A result. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateEnvironmentCall(
        String code, Integer id, EnvironmentUpdate environmentUpdate, final ApiCallback _callback
    ) throws QaseException {
        return updateEntityAsync(code, id, environmentUpdate, _callback);
    }

    /**
     * Update environment.
     * This method updates an environment.
     *
     * @param code              Code of project, where to search entities. (required)
     * @param id                Identifier. (required)
     * @param environmentUpdate (required)
     * @return IdResponse
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A result. </td><td>  -  </td></tr>
     * </table>
     */
    public IdResponse updateEnvironment(String code, Integer id, EnvironmentUpdate environmentUpdate)
    throws QaseException {
        return updateEntity(code, id, environmentUpdate);
    }

    /**
     * Update environment.
     * This method updates an environment.
     *
     * @param code              Code of project, where to search entities. (required)
     * @param id                Identifier. (required)
     * @param environmentUpdate (required)
     * @return ApiResponse&lt;IdResponse&gt;
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A result. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IdResponse> updateEnvironmentWithHttpInfo(
        String code, Integer id, EnvironmentUpdate environmentUpdate
    ) throws QaseException {
        return updateEntityWithHttpInfo(code, id, environmentUpdate);
    }

    /**
     * Update environment. (asynchronously)
     * This method updates an environment.
     *
     * @param code              Code of project, where to search entities. (required)
     * @param id                Identifier. (required)
     * @param environmentUpdate (required)
     * @param _callback         The callback to be executed when the API call finishes
     * @return The request call
     * @throws QaseException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A result. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateEnvironmentAsync(
        String code, Integer id, EnvironmentUpdate environmentUpdate, final ApiCallback<IdResponse> _callback
    ) throws QaseException {
        return updateEntityAsync(code, id, environmentUpdate, _callback);
    }

    @Override
    protected String getEntityPath() {
        return "/environment";
    }
}
