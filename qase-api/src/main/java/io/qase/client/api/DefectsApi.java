/*
 * Qase.io API
 * Qase API Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.qase.client.api;

import com.google.gson.reflect.TypeToken;
import io.qase.api.exceptions.QaseException;
import io.qase.client.ApiCallback;
import io.qase.client.ApiClient;
import io.qase.client.ApiResponse;
import io.qase.client.model.*;

import java.lang.reflect.Type;

public class DefectsApi extends AbstractEntityApi {

    public DefectsApi() {
        super();
    }

    public DefectsApi(ApiClient apiClient) {
        super(apiClient);
    }

    /**
     * Build call for createDefect
     *
     * @param code         Code of project, where to search entities. (required)
     * @param defectCreate (required)
     * @param _callback    Callback for upload/download progress
     * @return Call to execute
     * @throws QaseException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A result. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createDefectCall(String code, DefectCreate defectCreate, final ApiCallback _callback)
    throws QaseException {
        return createEntityCall(code, defectCreate, _callback);
    }

    /**
     * Create a new defect.
     * This method allows to create a defect in selected project.
     *
     * @param code         Code of project, where to search entities. (required)
     * @param defectCreate (required)
     * @return IdResponse
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A result. </td><td>  -  </td></tr>
     * </table>
     */
    public IdResponse createDefect(String code, DefectCreate defectCreate) throws QaseException {
        return createEntity(code, defectCreate);
    }

    /**
     * Create a new defect.
     * This method allows to create a defect in selected project.
     *
     * @param code         Code of project, where to search entities. (required)
     * @param defectCreate (required)
     * @return ApiResponse&lt;IdResponse&gt;
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A result. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IdResponse> createDefectWithHttpInfo(String code, DefectCreate defectCreate)
    throws QaseException {
        return createEntityWithHttpInfo(code, defectCreate);
    }

    /**
     * Create a new defect. (asynchronously)
     * This method allows to create a defect in selected project.
     *
     * @param code         Code of project, where to search entities. (required)
     * @param defectCreate (required)
     * @param _callback    The callback to be executed when the API call finishes
     * @return The request call
     * @throws QaseException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A result. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createDefectAsync(
        String code, DefectCreate defectCreate, final ApiCallback<IdResponse> _callback
    ) throws QaseException {
        return createEntityAsync(code, defectCreate, _callback);
    }

    /**
     * Build call for deleteDefect
     *
     * @param code      Code of project, where to search entities. (required)
     * @param id        Identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws QaseException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A Result. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteDefectCall(String code, Integer id, final ApiCallback _callback) throws QaseException {
        return deleteEntityCall(code, id, _callback);
    }

    /**
     * Delete defect.
     * This method completely deletes a defect from repository.
     *
     * @param code Code of project, where to search entities. (required)
     * @param id   Identifier. (required)
     * @return IdResponse
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A Result. </td><td>  -  </td></tr>
     * </table>
     */
    public IdResponse deleteDefect(String code, Integer id) throws QaseException {
        return deleteEntity(code, id);
    }

    /**
     * Delete defect.
     * This method completely deletes a defect from repository.
     *
     * @param code Code of project, where to search entities. (required)
     * @param id   Identifier. (required)
     * @return ApiResponse&lt;IdResponse&gt;
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A Result. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IdResponse> deleteDefectWithHttpInfo(String code, Integer id) throws QaseException {
        return deleteEntityWithHttpInfo(code, id);
    }

    /**
     * Delete defect. (asynchronously)
     * This method completely deletes a defect from repository.
     *
     * @param code      Code of project, where to search entities. (required)
     * @param id        Identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QaseException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A Result. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteDefectAsync(
        String code, Integer id, final ApiCallback<IdResponse> _callback
    ) throws QaseException {
        return deleteEntityAsync(code, id, _callback);
    }

    /**
     * Build call for getDefect
     *
     * @param code      Code of project, where to search entities. (required)
     * @param id        Identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws QaseException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A defect. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getDefectCall(String code, Integer id, final ApiCallback _callback) throws QaseException {
        return getEntityCall(code, id, _callback);
    }

    /**
     * Get a specific defect.
     * This method allows to retrieve a specific defect.
     *
     * @param code Code of project, where to search entities. (required)
     * @param id   Identifier. (required)
     * @return DefectResponse
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A defect. </td><td>  -  </td></tr>
     * </table>
     */
    public DefectResponse getDefect(String code, Integer id) throws QaseException {
        return getEntity(code, id);
    }

    /**
     * Get a specific defect.
     * This method allows to retrieve a specific defect.
     *
     * @param code Code of project, where to search entities. (required)
     * @param id   Identifier. (required)
     * @return ApiResponse&lt;DefectResponse&gt;
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A defect. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<DefectResponse> getDefectWithHttpInfo(String code, Integer id) throws QaseException {
        return getEntityWithHttpInfo(code, id);
    }

    /**
     * Get a specific defect. (asynchronously)
     * This method allows to retrieve a specific defect.
     *
     * @param code      Code of project, where to search entities. (required)
     * @param id        Identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QaseException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A defect. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getDefectAsync(String code, Integer id, final ApiCallback<DefectResponse> _callback)
    throws QaseException {
        return getEntityAsync(code, id, _callback);
    }

    /**
     * Build call for getDefects
     *
     * @param code      Code of project, where to search entities. (required)
     * @param filters   (optional)
     * @param limit     A number of entities in result set. (optional, default to 10)
     * @param offset    How many entities should be skipped. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws QaseException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A list of all defects. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getDefectsCall(
        String code, Filters2 filters, Integer limit, Integer offset, final ApiCallback _callback
    ) throws QaseException {
        return getEntitiesCall(code, filters, limit, offset, _callback);
    }

    /**
     * Get all defects.
     * This method allows to retrieve all defects stored in selected project.
     *
     * @param code    Code of project, where to search entities. (required)
     * @param filters (optional)
     * @param limit   A number of entities in result set. (optional, default to 10)
     * @param offset  How many entities should be skipped. (optional, default to 0)
     * @return DefectListResponse
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A list of all defects. </td><td>  -  </td></tr>
     * </table>
     */
    public DefectListResponse getDefects(String code, Filters2 filters, Integer limit, Integer offset)
    throws QaseException {
        return getEntities(code, filters, limit, offset);
    }

    /**
     * Get all defects.
     * This method allows to retrieve all defects stored in selected project.
     *
     * @param code    Code of project, where to search entities. (required)
     * @param filters (optional)
     * @param limit   A number of entities in result set. (optional, default to 10)
     * @param offset  How many entities should be skipped. (optional, default to 0)
     * @return ApiResponse&lt;DefectListResponse&gt;
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A list of all defects. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<DefectListResponse> getDefectsWithHttpInfo(
        String code, Filters2 filters, Integer limit, Integer offset
    ) throws QaseException {
        return getEntitiesWithHttpInfo(code, filters, limit, offset);
    }

    /**
     * Get all defects. (asynchronously)
     * This method allows to retrieve all defects stored in selected project.
     *
     * @param code      Code of project, where to search entities. (required)
     * @param filters   (optional)
     * @param limit     A number of entities in result set. (optional, default to 10)
     * @param offset    How many entities should be skipped. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QaseException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A list of all defects. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getDefectsAsync(
        String code, Filters2 filters, Integer limit, Integer offset, final ApiCallback<DefectListResponse> _callback
    ) throws QaseException {
        return getEntitiesAsync(code, filters, limit, offset, _callback);
    }

    /**
     * Build call for resolveDefect
     *
     * @param code      Code of project, where to search entities. (required)
     * @param id        Identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws QaseException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A result. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call resolveDefectCall(String code, Integer id, final ApiCallback _callback) throws QaseException {
        return resolveEntityCall(code, id, _callback);
    }

    /**
     * Resolve a specific defect.
     * This method allows to resolve a specific defect.
     *
     * @param code Code of project, where to search entities. (required)
     * @param id   Identifier. (required)
     * @return IdResponse
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A result. </td><td>  -  </td></tr>
     * </table>
     */
    public IdResponse resolveDefect(String code, Integer id) throws QaseException {
        return resolveEntity(code, id);
    }

    /**
     * Resolve a specific defect.
     * This method allows to resolve a specific defect.
     *
     * @param code Code of project, where to search entities. (required)
     * @param id   Identifier. (required)
     * @return ApiResponse&lt;IdResponse&gt;
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A result. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IdResponse> resolveDefectWithHttpInfo(String code, Integer id) throws QaseException {
        return resolveEntityWithHttpInfo(code, id);
    }

    /**
     * Resolve a specific defect. (asynchronously)
     * This method allows to resolve a specific defect.
     *
     * @param code      Code of project, where to search entities. (required)
     * @param id        Identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QaseException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A result. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call resolveDefectAsync(String code, Integer id, final ApiCallback<IdResponse> _callback)
    throws QaseException {
        return resolveEntityAsync(code, id, _callback);
    }

    /**
     * Build call for updateDefect
     *
     * @param code         Code of project, where to search entities. (required)
     * @param id           Identifier. (required)
     * @param defectUpdate (required)
     * @param _callback    Callback for upload/download progress
     * @return Call to execute
     * @throws QaseException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A result. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateDefectCall(
        String code, Integer id, DefectUpdate defectUpdate, final ApiCallback _callback
    ) throws QaseException {
        return updateEntityCall(code, id, defectUpdate, _callback);
    }

    /**
     * Update defect.
     * This method updates a defect.
     *
     * @param code         Code of project, where to search entities. (required)
     * @param id           Identifier. (required)
     * @param defectUpdate (required)
     * @return IdResponse
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A result. </td><td>  -  </td></tr>
     * </table>
     */
    public IdResponse updateDefect(String code, Integer id, DefectUpdate defectUpdate) throws QaseException {
        return updateEntity(code, id, defectUpdate);
    }

    /**
     * Update defect.
     * This method updates a defect.
     *
     * @param code         Code of project, where to search entities. (required)
     * @param id           Identifier. (required)
     * @param defectUpdate (required)
     * @return ApiResponse&lt;IdResponse&gt;
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A result. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IdResponse> updateDefectWithHttpInfo(String code, Integer id, DefectUpdate defectUpdate)
    throws QaseException {
        return updateEntityWithHttpInfo(code, id, defectUpdate);
    }

    /**
     * Update defect. (asynchronously)
     * This method updates a defect.
     *
     * @param code         Code of project, where to search entities. (required)
     * @param id           Identifier. (required)
     * @param defectUpdate (required)
     * @param _callback    The callback to be executed when the API call finishes
     * @return The request call
     * @throws QaseException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A result. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateDefectAsync(
        String code, Integer id, DefectUpdate defectUpdate, final ApiCallback<IdResponse> _callback
    ) throws QaseException {
        return updateEntityAsync(code, id, defectUpdate, _callback);
    }

    /**
     * Build call for updateDefectStatus
     *
     * @param code         Code of project, where to search entities. (required)
     * @param id           Identifier. (required)
     * @param defectStatus (required)
     * @param _callback    Callback for upload/download progress
     * @return Call to execute
     * @throws QaseException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A result. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateDefectStatusCall(
        String code, Integer id, DefectStatus defectStatus, final ApiCallback _callback
    ) throws QaseException {
        return updateEntityStatusCall(code, id, defectStatus, _callback);
    }

    /**
     * Update a specific defect status.
     * This method allows to update a specific defect status.
     *
     * @param code         Code of project, where to search entities. (required)
     * @param id           Identifier. (required)
     * @param defectStatus (required)
     * @return Response
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A result. </td><td>  -  </td></tr>
     * </table>
     */
    public Response updateDefectStatus(String code, Integer id, DefectStatus defectStatus) throws QaseException {
        ApiResponse<Response> localVarResp = updateEntityStatusWithHttpInfo(code, id, defectStatus);
        return localVarResp.getData();
    }

    /**
     * Update a specific defect status.
     * This method allows to update a specific defect status.
     *
     * @param code         Code of project, where to search entities. (required)
     * @param id           Identifier. (required)
     * @param defectStatus (required)
     * @return ApiResponse&lt;Response&gt;
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A result. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Response> updateDefectStatusWithHttpInfo(String code, Integer id, DefectStatus defectStatus)
    throws QaseException {
        return updateEntityStatusWithHttpInfo(code, id, defectStatus);
    }

    /**
     * Update a specific defect status. (asynchronously)
     * This method allows to update a specific defect status.
     *
     * @param code         Code of project, where to search entities. (required)
     * @param id           Identifier. (required)
     * @param defectStatus (required)
     * @param _callback    The callback to be executed when the API call finishes
     * @return The request call
     * @throws QaseException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A result. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateDefectStatusAsync(
        String code, Integer id, DefectStatus defectStatus, final ApiCallback<Response> _callback
    ) throws QaseException {
        return updateEntityStatusAsync(code, id, defectStatus, _callback);
    }

    /**
     * Update a specific entity status.
     * This method allows to update a specific entity status.
     *
     * @param code         Code of project, where to search entities. (required)
     * @param id           Identifier. (required)
     * @param entityStatus (required)
     * @return ApiResponse&lt;Response&gt;
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A result. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Response> updateEntityStatusWithHttpInfo(String code, Integer id, DefectStatus entityStatus)
        throws QaseException {
        okhttp3.Call localVarCall = updateEntityStatusValidateBeforeCall(code, id, entityStatus, null);
        Type localVarReturnType = new TypeToken<Response>() { }.getType();
        return getApiClient().execute(localVarCall, localVarReturnType);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEntityStatusValidateBeforeCall(
        String code, Integer id, DefectStatus defectStatus, final ApiCallback _callback
    ) throws QaseException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new QaseException("Missing the required parameter 'code' when calling updateEntityStatus(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new QaseException("Missing the required parameter 'id' when calling updateEntityStatus(Async)");
        }

        // verify the required parameter 'entityStatus' is set
        if (defectStatus == null) {
            throw new QaseException(
                "Missing the required parameter 'entityStatus' when calling updateEntityStatus(Async)"
            );
        }

        return updateEntityStatusCall(code, id, defectStatus, _callback);
    }

    /**
     * Update a specific entity status. (asynchronously)
     * This method allows to update a specific entity status.
     *
     * @param code         Code of project, where to search entities. (required)
     * @param id           Identifier. (required)
     * @param defectStatus (required)
     * @param _callback    The callback to be executed when the API call finishes
     * @return The request call
     * @throws QaseException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A result. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateEntityStatusAsync(
        String code, Integer id, DefectStatus defectStatus, final ApiCallback<Response> _callback
    ) throws QaseException {
        okhttp3.Call localVarCall = updateEntityStatusValidateBeforeCall(code, id, defectStatus, _callback);
        Type localVarReturnType = new TypeToken<Response>() { }.getType();
        getApiClient().executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    @Override
    protected String getEntityRootPathSegment() {
        return "defect";
    }
}
