/*
 * Qase.io API
 * Qase API Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.qase.client.api;

import com.google.gson.reflect.TypeToken;
import io.qase.api.exceptions.QaseException;
import io.qase.client.ApiCallback;
import io.qase.client.ApiClient;
import io.qase.client.ApiResponse;
import io.qase.client.Pair;
import io.qase.client.model.*;
import io.qase.enums.HttpMethod;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static io.qase.configuration.QaseModule.INJECTOR;

public class CasesApi {

    private ApiClient localVarApiClient;

    public CasesApi() {
        this(INJECTOR.getInstance(ApiClient.class));
    }

    public CasesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createCase
     *
     * @param code           Code of project, where to search entities. (required)
     * @param testCaseCreate (required)
     * @param _callback      Callback for upload/download progress
     * @return Call to execute
     * @throws QaseException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A list of all projects. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createCaseCall(String code, TestCaseCreate testCaseCreate, final ApiCallback _callback)
    throws QaseException {
        Object localVarPostBody = testCaseCreate;

        // create path and map variables
        String localVarPath = "/case/" + localVarApiClient.escapeString(code);

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {"TokenAuth"};
        return localVarApiClient.buildCall(
            localVarPath,
            HttpMethod.POST.toString(),
            localVarQueryParams,
            localVarCollectionQueryParams,
            localVarPostBody,
            localVarHeaderParams,
            localVarCookieParams,
            localVarFormParams,
            localVarAuthNames,
            _callback
        );
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCaseValidateBeforeCall(
        String code, TestCaseCreate testCaseCreate, final ApiCallback _callback
    ) throws QaseException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new QaseException("Missing the required parameter 'code' when calling createCase(Async)");
        }

        // verify the required parameter 'testCaseCreate' is set
        if (testCaseCreate == null) {
            throw new QaseException("Missing the required parameter 'testCaseCreate' when calling createCase(Async)");
        }

        return createCaseCall(code, testCaseCreate, _callback);
    }

    /**
     * Create a new test case.
     * This method allows to create a new test case in selected project.
     *
     * @param code           Code of project, where to search entities. (required)
     * @param testCaseCreate (required)
     * @return IdResponse
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A list of all projects. </td><td>  -  </td></tr>
     * </table>
     */
    public IdResponse createCase(String code, TestCaseCreate testCaseCreate) throws QaseException {
        ApiResponse<IdResponse> localVarResp = createCaseWithHttpInfo(code, testCaseCreate);
        return localVarResp.getData();
    }

    /**
     * Create a new test case.
     * This method allows to create a new test case in selected project.
     *
     * @param code           Code of project, where to search entities. (required)
     * @param testCaseCreate (required)
     * @return ApiResponse&lt;IdResponse&gt;
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A list of all projects. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IdResponse> createCaseWithHttpInfo(String code, TestCaseCreate testCaseCreate)
    throws QaseException {
        okhttp3.Call localVarCall = createCaseValidateBeforeCall(code, testCaseCreate, null);
        Type localVarReturnType = new TypeToken<IdResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new test case. (asynchronously)
     * This method allows to create a new test case in selected project.
     *
     * @param code           Code of project, where to search entities. (required)
     * @param testCaseCreate (required)
     * @param _callback      The callback to be executed when the API call finishes
     * @return The request call
     * @throws QaseException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A list of all projects. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createCaseAsync(
        String code, TestCaseCreate testCaseCreate, final ApiCallback<IdResponse> _callback
    ) throws QaseException {
        okhttp3.Call localVarCall = createCaseValidateBeforeCall(code, testCaseCreate, _callback);
        Type localVarReturnType = new TypeToken<IdResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for deleteCase
     *
     * @param code      Code of project, where to search entities. (required)
     * @param id        Identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws QaseException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A Test Case. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteCaseCall(String code, Integer id, final ApiCallback _callback) throws QaseException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = String.format(
            "/case/%s/%s", localVarApiClient.escapeString(code), localVarApiClient.escapeString(id.toString())
        );

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = { };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {"TokenAuth"};

        return localVarApiClient.buildCall(
            localVarPath,
            "DELETE",
            localVarQueryParams,
            localVarCollectionQueryParams,
            localVarPostBody,
            localVarHeaderParams,
            localVarCookieParams,
            localVarFormParams,
            localVarAuthNames,
            _callback
        );
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCaseValidateBeforeCall(String code, Integer id, final ApiCallback _callback)
    throws QaseException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new QaseException("Missing the required parameter 'code' when calling deleteCase(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new QaseException("Missing the required parameter 'id' when calling deleteCase(Async)");
        }

        return deleteCaseCall(code, id, _callback);
    }

    /**
     * Delete test case.
     * This method completely deletes a test case from repository.
     *
     * @param code Code of project, where to search entities. (required)
     * @param id   Identifier. (required)
     * @return IdResponse
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A Test Case. </td><td>  -  </td></tr>
     * </table>
     */
    public IdResponse deleteCase(String code, Integer id) throws QaseException {
        ApiResponse<IdResponse> localVarResp = deleteCaseWithHttpInfo(code, id);
        return localVarResp.getData();
    }

    /**
     * Delete test case.
     * This method completely deletes a test case from repository.
     *
     * @param code Code of project, where to search entities. (required)
     * @param id   Identifier. (required)
     * @return ApiResponse&lt;IdResponse&gt;
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A Test Case. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IdResponse> deleteCaseWithHttpInfo(String code, Integer id) throws QaseException {
        okhttp3.Call localVarCall = deleteCaseValidateBeforeCall(code, id, null);
        Type localVarReturnType = new TypeToken<IdResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete test case. (asynchronously)
     * This method completely deletes a test case from repository.
     *
     * @param code      Code of project, where to search entities. (required)
     * @param id        Identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QaseException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A Test Case. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteCaseAsync(String code, Integer id, final ApiCallback<IdResponse> _callback)
    throws QaseException {
        okhttp3.Call localVarCall = deleteCaseValidateBeforeCall(code, id, _callback);
        Type localVarReturnType = new TypeToken<IdResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getCase
     *
     * @param code      Code of project, where to search entities. (required)
     * @param id        Identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws QaseException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A Test Case. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getCaseCall(String code, Integer id, final ApiCallback _callback) throws QaseException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = String.format(
            "/case/%s/%s", localVarApiClient.escapeString(code), localVarApiClient.escapeString(id.toString())
        );

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = { };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {"TokenAuth"};
        return localVarApiClient.buildCall(
            localVarPath,
            "GET",
            localVarQueryParams,
            localVarCollectionQueryParams,
            localVarPostBody,
            localVarHeaderParams,
            localVarCookieParams,
            localVarFormParams,
            localVarAuthNames,
            _callback
        );
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCaseValidateBeforeCall(String code, Integer id, final ApiCallback _callback)
    throws QaseException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new QaseException("Missing the required parameter 'code' when calling getCase(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new QaseException("Missing the required parameter 'id' when calling getCase(Async)");
        }

        return getCaseCall(code, id, _callback);
    }

    /**
     * Get a specific test case.
     * This method allows to retrieve a specific test case.
     *
     * @param code Code of project, where to search entities. (required)
     * @param id   Identifier. (required)
     * @return TestCaseResponse
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A Test Case. </td><td>  -  </td></tr>
     * </table>
     */
    public TestCaseResponse getCase(String code, Integer id) throws QaseException {
        ApiResponse<TestCaseResponse> localVarResp = getCaseWithHttpInfo(code, id);
        return localVarResp.getData();
    }

    /**
     * Get a specific test case.
     * This method allows to retrieve a specific test case.
     *
     * @param code Code of project, where to search entities. (required)
     * @param id   Identifier. (required)
     * @return ApiResponse&lt;TestCaseResponse&gt;
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A Test Case. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<TestCaseResponse> getCaseWithHttpInfo(String code, Integer id) throws QaseException {
        okhttp3.Call localVarCall = getCaseValidateBeforeCall(code, id, null);
        Type localVarReturnType = new TypeToken<TestCaseResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific test case. (asynchronously)
     * This method allows to retrieve a specific test case.
     *
     * @param code      Code of project, where to search entities. (required)
     * @param id        Identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QaseException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A Test Case. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getCaseAsync(String code, Integer id, final ApiCallback<TestCaseResponse> _callback)
    throws QaseException {
        okhttp3.Call localVarCall = getCaseValidateBeforeCall(code, id, _callback);
        Type localVarReturnType = new TypeToken<TestCaseResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getCases
     *
     * @param code      Code of project, where to search entities. (required)
     * @param filters   (optional)
     * @param limit     A number of entities in result set. (optional, default to 10)
     * @param offset    How many entities should be skipped. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws QaseException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A list of all projects. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getCasesCall(
        String code, Filters filters, Integer limit, Integer offset, final ApiCallback _callback
    ) throws QaseException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/case/" + localVarApiClient.escapeString(code);

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = { };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {"TokenAuth"};
        return localVarApiClient.buildCall(
            localVarPath,
            "GET",
            localVarQueryParams,
            localVarCollectionQueryParams,
            localVarPostBody,
            localVarHeaderParams,
            localVarCookieParams,
            localVarFormParams,
            localVarAuthNames,
            _callback
        );
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCasesValidateBeforeCall(
        String code, Filters filters, Integer limit, Integer offset, final ApiCallback _callback
    ) throws QaseException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new QaseException("Missing the required parameter 'code' when calling getCases(Async)");
        }

        return getCasesCall(code, filters, limit, offset, _callback);
    }

    /**
     * Get all test cases.
     * This method allows to retrieve all test cases stored in selected project.
     *
     * @param code    Code of project, where to search entities. (required)
     * @param filters (optional)
     * @param limit   A number of entities in result set. (optional, default to 10)
     * @param offset  How many entities should be skipped. (optional, default to 0)
     * @return TestCaseListResponse
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A list of all projects. </td><td>  -  </td></tr>
     * </table>
     */
    public TestCaseListResponse getCases(String code, Filters filters, Integer limit, Integer offset)
    throws QaseException {
        ApiResponse<TestCaseListResponse> localVarResp = getCasesWithHttpInfo(code, filters, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get all test cases.
     * This method allows to retrieve all test cases stored in selected project.
     *
     * @param code    Code of project, where to search entities. (required)
     * @param filters (optional)
     * @param limit   A number of entities in result set. (optional, default to 10)
     * @param offset  How many entities should be skipped. (optional, default to 0)
     * @return ApiResponse&lt;TestCaseListResponse&gt;
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A list of all projects. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<TestCaseListResponse> getCasesWithHttpInfo(
        String code, Filters filters, Integer limit, Integer offset
    ) throws QaseException {
        okhttp3.Call localVarCall = getCasesValidateBeforeCall(code, filters, limit, offset, null);
        Type localVarReturnType = new TypeToken<TestCaseListResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all test cases. (asynchronously)
     * This method allows to retrieve all test cases stored in selected project.
     *
     * @param code      Code of project, where to search entities. (required)
     * @param filters   (optional)
     * @param limit     A number of entities in result set. (optional, default to 10)
     * @param offset    How many entities should be skipped. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QaseException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A list of all projects. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getCasesAsync(
        String code, Filters filters, Integer limit, Integer offset, final ApiCallback<TestCaseListResponse> _callback
    ) throws QaseException {
        okhttp3.Call localVarCall = getCasesValidateBeforeCall(code, filters, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<TestCaseListResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for updateCase
     *
     * @param code           Code of project, where to search entities. (required)
     * @param id             Identifier. (required)
     * @param testCaseUpdate (required)
     * @param _callback      Callback for upload/download progress
     * @return Call to execute
     * @throws QaseException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A Test Case. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateCaseCall(
        String code, Integer id, TestCaseUpdate testCaseUpdate, final ApiCallback _callback
    ) throws QaseException {
        Object localVarPostBody = testCaseUpdate;

        // create path and map variables
        String localVarPath = String.format(
            "/case/%s/%s", localVarApiClient.escapeString(code), localVarApiClient.escapeString(id.toString())
        );

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {"TokenAuth"};
        return localVarApiClient.buildCall(
            localVarPath,
            HttpMethod.PATCH.toString(),
            localVarQueryParams,
            localVarCollectionQueryParams,
            localVarPostBody,
            localVarHeaderParams,
            localVarCookieParams,
            localVarFormParams,
            localVarAuthNames,
            _callback
        );
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCaseValidateBeforeCall(
        String code, Integer id, TestCaseUpdate testCaseUpdate, final ApiCallback _callback
    ) throws QaseException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new QaseException("Missing the required parameter 'code' when calling updateCase(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new QaseException("Missing the required parameter 'id' when calling updateCase(Async)");
        }

        // verify the required parameter 'testCaseUpdate' is set
        if (testCaseUpdate == null) {
            throw new QaseException("Missing the required parameter 'testCaseUpdate' when calling updateCase(Async)");
        }

        return updateCaseCall(code, id, testCaseUpdate, _callback);
    }

    /**
     * Update test case.
     * This method updates a test case.
     *
     * @param code           Code of project, where to search entities. (required)
     * @param id             Identifier. (required)
     * @param testCaseUpdate (required)
     * @return IdResponse
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A Test Case. </td><td>  -  </td></tr>
     * </table>
     */
    public IdResponse updateCase(String code, Integer id, TestCaseUpdate testCaseUpdate) throws QaseException {
        ApiResponse<IdResponse> localVarResp = updateCaseWithHttpInfo(code, id, testCaseUpdate);
        return localVarResp.getData();
    }

    /**
     * Update test case.
     * This method updates a test case.
     *
     * @param code           Code of project, where to search entities. (required)
     * @param id             Identifier. (required)
     * @param testCaseUpdate (required)
     * @return ApiResponse&lt;IdResponse&gt;
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A Test Case. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IdResponse> updateCaseWithHttpInfo(
        String code, Integer id, TestCaseUpdate testCaseUpdate
    ) throws QaseException {
        okhttp3.Call localVarCall = updateCaseValidateBeforeCall(code, id, testCaseUpdate, null);
        Type localVarReturnType = new TypeToken<IdResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update test case. (asynchronously)
     * This method updates a test case.
     *
     * @param code           Code of project, where to search entities. (required)
     * @param id             Identifier. (required)
     * @param testCaseUpdate (required)
     * @param _callback      The callback to be executed when the API call finishes
     * @return The request call
     * @throws QaseException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A Test Case. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateCaseAsync(
        String code, Integer id, TestCaseUpdate testCaseUpdate, final ApiCallback<IdResponse> _callback
    ) throws QaseException {
        okhttp3.Call localVarCall = updateCaseValidateBeforeCall(code, id, testCaseUpdate, _callback);
        Type localVarReturnType = new TypeToken<IdResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
