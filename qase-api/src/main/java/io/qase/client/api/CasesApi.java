/*
 * Qase.io API
 * Qase API Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.qase.client.api;

import io.qase.api.exceptions.QaseException;
import io.qase.client.ApiCallback;
import io.qase.client.ApiClient;
import io.qase.client.ApiResponse;
import io.qase.client.model.*;

public class CasesApi extends AbstractEntityApi {

    public CasesApi() {
        super();
    }

    public CasesApi(ApiClient apiClient) {
        super(apiClient);
    }

    /**
     * Build call for createCase
     *
     * @param code           Code of project, where to search entities. (required)
     * @param testCaseCreate (required)
     * @param _callback      Callback for upload/download progress
     * @return Call to execute
     * @throws QaseException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A list of all projects. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createCaseCall(String code, TestCaseCreate testCaseCreate, final ApiCallback _callback)
    throws QaseException {
        return createEntityCall(code, testCaseCreate, _callback);
    }

    /**
     * Create a new test case.
     * This method allows to create a new test case in selected project.
     *
     * @param code           Code of project, where to search entities. (required)
     * @param testCaseCreate (required)
     * @return IdResponse
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A list of all projects. </td><td>  -  </td></tr>
     * </table>
     */
    public IdResponse createCase(String code, TestCaseCreate testCaseCreate) throws QaseException {
        return createEntity(code, testCaseCreate);
    }

    /**
     * Create a new test case.
     * This method allows to create a new test case in selected project.
     *
     * @param code           Code of project, where to search entities. (required)
     * @param testCaseCreate (required)
     * @return ApiResponse&lt;IdResponse&gt;
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A list of all projects. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IdResponse> createCaseWithHttpInfo(String code, TestCaseCreate testCaseCreate)
    throws QaseException {
        return createEntityWithHttpInfo(code, testCaseCreate);
    }

    /**
     * Create a new test case. (asynchronously)
     * This method allows to create a new test case in selected project.
     *
     * @param code           Code of project, where to search entities. (required)
     * @param testCaseCreate (required)
     * @param _callback      The callback to be executed when the API call finishes
     * @return The request call
     * @throws QaseException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A list of all projects. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createCaseAsync(
        String code, TestCaseCreate testCaseCreate, final ApiCallback<IdResponse> _callback
    ) throws QaseException {
        return createEntityAsync(code, testCaseCreate, _callback);
    }

    /**
     * Build call for deleteCase
     *
     * @param code      Code of project, where to search entities. (required)
     * @param id        Identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws QaseException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A Test Case. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteCaseCall(String code, Integer id, final ApiCallback _callback) throws QaseException {
        return deleteEntityCall(code, id, _callback);
    }

    /**
     * Delete test case.
     * This method completely deletes a test case from repository.
     *
     * @param code Code of project, where to search entities. (required)
     * @param id   Identifier. (required)
     * @return IdResponse
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A Test Case. </td><td>  -  </td></tr>
     * </table>
     */
    public IdResponse deleteCase(String code, Integer id) throws QaseException {
        return deleteEntity(code, id);
    }

    /**
     * Delete test case.
     * This method completely deletes a test case from repository.
     *
     * @param code Code of project, where to search entities. (required)
     * @param id   Identifier. (required)
     * @return ApiResponse&lt;IdResponse&gt;
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A Test Case. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IdResponse> deleteCaseWithHttpInfo(String code, Integer id) throws QaseException {
        return deleteEntityWithHttpInfo(code, id);
    }

    /**
     * Delete test case. (asynchronously)
     * This method completely deletes a test case from repository.
     *
     * @param code      Code of project, where to search entities. (required)
     * @param id        Identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QaseException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A Test Case. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteCaseAsync(String code, Integer id, final ApiCallback<IdResponse> _callback)
    throws QaseException {
        return deleteEntityAsync(code, id, _callback);
    }

    /**
     * Build call for getCase
     *
     * @param code      Code of project, where to search entities. (required)
     * @param id        Identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws QaseException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A Test Case. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getCaseCall(String code, Integer id, final ApiCallback _callback) throws QaseException {
        return getEntityCall(code, id, _callback);
    }

    /**
     * Get a specific test case.
     * This method allows to retrieve a specific test case.
     *
     * @param code Code of project, where to search entities. (required)
     * @param id   Identifier. (required)
     * @return TestCaseResponse
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A Test Case. </td><td>  -  </td></tr>
     * </table>
     */
    public TestCaseResponse getCase(String code, Integer id) throws QaseException {
        return getEntity(code, id);
    }

    /**
     * Get a specific test case.
     * This method allows to retrieve a specific test case.
     *
     * @param code Code of project, where to search entities. (required)
     * @param id   Identifier. (required)
     * @return ApiResponse&lt;TestCaseResponse&gt;
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A Test Case. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<TestCaseResponse> getCaseWithHttpInfo(String code, Integer id) throws QaseException {
        return getEntityWithHttpInfo(code, id);
    }

    /**
     * Get a specific test case. (asynchronously)
     * This method allows to retrieve a specific test case.
     *
     * @param code      Code of project, where to search entities. (required)
     * @param id        Identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QaseException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A Test Case. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getCaseAsync(String code, Integer id, final ApiCallback<TestCaseResponse> _callback)
    throws QaseException {
        return getEntityAsync(code, id, _callback);
    }

    /**
     * Build call for getCases
     *
     * @param code      Code of project, where to search entities. (required)
     * @param filters   (optional)
     * @param limit     A number of entities in result set. (optional, default to 10)
     * @param offset    How many entities should be skipped. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws QaseException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A list of all projects. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getCasesCall(
        String code, Filters filters, Integer limit, Integer offset, final ApiCallback _callback
    ) throws QaseException {
        return getEntitiesCall(code, filters, limit, offset, _callback);
    }

    /**
     * Get all test cases.
     * This method allows to retrieve all test cases stored in selected project.
     *
     * @param code    Code of project, where to search entities. (required)
     * @param filters (optional)
     * @param limit   A number of entities in result set. (optional, default to 10)
     * @param offset  How many entities should be skipped. (optional, default to 0)
     * @return TestCaseListResponse
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A list of all projects. </td><td>  -  </td></tr>
     * </table>
     */
    public TestCaseListResponse getCases(String code, Filters filters, Integer limit, Integer offset)
    throws QaseException {
        return getEntities(code, filters, limit, offset);
    }

    /**
     * Get all test cases.
     * This method allows to retrieve all test cases stored in selected project.
     *
     * @param code    Code of project, where to search entities. (required)
     * @param filters (optional)
     * @param limit   A number of entities in result set. (optional, default to 10)
     * @param offset  How many entities should be skipped. (optional, default to 0)
     * @return ApiResponse&lt;TestCaseListResponse&gt;
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A list of all projects. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<TestCaseListResponse> getCasesWithHttpInfo(
        String code, Filters filters, Integer limit, Integer offset
    ) throws QaseException {
        return getEntitiesWithHttpInfo(code, filters, limit, offset);
    }

    /**
     * Get all test cases. (asynchronously)
     * This method allows to retrieve all test cases stored in selected project.
     *
     * @param code      Code of project, where to search entities. (required)
     * @param filters   (optional)
     * @param limit     A number of entities in result set. (optional, default to 10)
     * @param offset    How many entities should be skipped. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QaseException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A list of all projects. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getCasesAsync(
        String code, Filters filters, Integer limit, Integer offset, final ApiCallback<TestCaseListResponse> _callback
    ) throws QaseException {
        return getEntitiesAsync(code, filters, limit, offset, _callback);
    }

    /**
     * Build call for updateCase
     *
     * @param code           Code of project, where to search entities. (required)
     * @param id             Identifier. (required)
     * @param testCaseUpdate (required)
     * @param _callback      Callback for upload/download progress
     * @return Call to execute
     * @throws QaseException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A Test Case. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateCaseCall(
        String code, Integer id, TestCaseUpdate testCaseUpdate, final ApiCallback _callback
    ) throws QaseException {
        return updateEntityCall(code, id, testCaseUpdate, _callback);
    }

    /**
     * Update test case.
     * This method updates a test case.
     *
     * @param code           Code of project, where to search entities. (required)
     * @param id             Identifier. (required)
     * @param testCaseUpdate (required)
     * @return IdResponse
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A Test Case. </td><td>  -  </td></tr>
     * </table>
     */
    public IdResponse updateCase(String code, Integer id, TestCaseUpdate testCaseUpdate) throws QaseException {
        return updateEntity(code, id, testCaseUpdate);
    }

    /**
     * Update test case.
     * This method updates a test case.
     *
     * @param code           Code of project, where to search entities. (required)
     * @param id             Identifier. (required)
     * @param testCaseUpdate (required)
     * @return ApiResponse&lt;IdResponse&gt;
     * @throws QaseException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A Test Case. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IdResponse> updateCaseWithHttpInfo(
        String code, Integer id, TestCaseUpdate testCaseUpdate
    ) throws QaseException {
        return updateEntityWithHttpInfo(code, id, testCaseUpdate);
    }

    /**
     * Update test case. (asynchronously)
     * This method updates a test case.
     *
     * @param code           Code of project, where to search entities. (required)
     * @param id             Identifier. (required)
     * @param testCaseUpdate (required)
     * @param _callback      The callback to be executed when the API call finishes
     * @return The request call
     * @throws QaseException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A Test Case. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateCaseAsync(
        String code, Integer id, TestCaseUpdate testCaseUpdate, final ApiCallback<IdResponse> _callback
    ) throws QaseException {
        return updateEntityAsync(code, id, testCaseUpdate, _callback);
    }

    @Override
    protected String getEntityRootPathSegment() {
        return "case";
    }
}
